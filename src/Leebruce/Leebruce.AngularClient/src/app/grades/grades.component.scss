@use "sass:math";

.subjects-display {
    display: grid;
    grid-template-columns: repeat(2, minmax(0, 1fr));
    gap: 1rem;
    max-width: 1800px;

    @media(min-width: 900px) {
        grid-template-columns: repeat(3, minmax(0, 1fr));
    }

    @media(min-width: 1200px) {
        grid-template-columns: repeat(4, minmax(0, 1fr));
    }

    @media(min-width: 1800px) {
        grid-template-columns: repeat(5, minmax(0, 1fr));
    }
}

.grades-modal-header {
    display: grid;
    grid-template-columns: 1fr auto;
    grid-template-rows: auto auto;
    column-gap: 1rem;
}

// hexagons
$root-three: 1.7320508075;

$width: 85px * ($root-three/2);
$gap: 8px;
$per-row: 3;
$is-vertical: true;

$longer-diagonal: $width;
$side: $longer-diagonal / 2;
$shorter-diagonal: $root-three * $side;
$ratio: $longer-diagonal / $shorter-diagonal;

$gap-x: $gap * math.sin(60deg);
$gap-y: $gap * math.cos(60deg);

@if $is-vertical {
    $shorter-diagonal: $width;
    $side: $shorter-diagonal / $root-three;
    $longer-diagonal: 2 * $side;
    $ratio: $shorter-diagonal / $longer-diagonal;

    $gap-x: $gap * math.cos(60deg);
    $gap-y: $gap * math.sin(60deg);
}

$triangle-height: $longer-diagonal / 2 - $side / 2;

.hexagon-grid {
    display: grid;
    grid-auto-rows: $triangle-height + $side;
    column-gap: $gap;

    @if $is-vertical {
        grid-template-columns: repeat($per-row, $shorter-diagonal);
        grid-auto-rows: $triangle-height + $side;
        column-gap: $gap;
        row-gap: $gap-y;
        padding-bottom: $triangle-height;
        padding-right: $shorter-diagonal / 2 + $gap-x;
    }

    @else {
        grid-template-columns: repeat($per-row, $longer-diagonal);
        grid-auto-rows: $shorter-diagonal / 2;
        column-gap: $side + 2 * $gap-x;
        row-gap: $gap-y;
        padding-bottom: $shorter-diagonal / 2;
        padding-right: $triangle-height + $side + $gap-x;
    }
}

.hexagon-grid>* {
    @if $is-vertical {
        margin-bottom: -$triangle-height;
    }

    @else {
        margin-bottom: -$shorter-diagonal/2;
    }
}

@for $i from 0 through 20 {
    @if $i % 2==1 {
        .hexagon-grid>*:nth-child(n + #{$i * $per-row + 1}):nth-child(-n + #{($i+1) * $per-row}) {
            @if $is-vertical {
                transform: translateX($shorter-diagonal / 2 + $gap-x);
            }

            @else {
                transform: translateX($longer-diagonal / 2 + $side / 2 + $gap-x);
            }

        }
    }
}

// modal body
.grades-display {
    display: grid;
    grid-auto-flow: column;
    grid-template-rows: auto auto;
    grid-template-columns: 1fr 1fr;
    justify-items: center;
    gap: 0.5rem 1rem;

    @media(max-width: 800px) {
        grid-template-rows: repeat(4, auto);
    }
}